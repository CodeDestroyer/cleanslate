h1. CleanSlate


h2. What is it?

*CleanSlate is an extreme CSS reset stylesheet.* It is used to reset a styled HTML element, and all its children, back to default CSS values. It is composed exclusively of "!important rules":http://www.w3.org/TR/CSS2/cascade.html#important-rules, which override all other types of rules.

It can be used independently of JavaScript. Or can be combined within JavaScript widgets, such as those created by the "Sqwidget":http://github.com/premasagar/sqwidget library.

h2. Why would I need it?

CleanSlate is useful when there have already been CSS styles declared on a page, and you need to reset those styles within a particular area. This is _not_ a stylesheet to use when developing your own website. For that, try Eric Meyer's classic "Reset CSS":http://meyerweb.com/eric/tools/css/reset/ or the "HTML5 Doctors' version":http://html5doctor.com/html-5-reset-stylesheet.

Instead, it can be useful when distributing content (e.g. a widget, or syndicated news) to third-party websites. The CSS rules in the host site may be unknown and unpredictable, or may change in future without notice, or there may be many websites you need to distribute to. In such situations, the CleanSlate stylesheet will aggressively reset your portion of content (and nothing else) back to some reasonable default values that you can then build from.

h2. Some example uses

 * The distribution of HTML/CSS/Javascript widgets to third-party websites. If your widget does not use an @iframe@ to sandbox its contents (and there are a few reasons why you wouldn't use an @iframe@), then you can use CleanSlate to prevent CSS styles "bleeding" into your widget (see the "History" section, below).
 * The distribution of styled content as part of a partner's website. Again, you may not want your content to be sandboxed within and @iframe@ (where it will miss out on Google Juice, and might require Javascript). Instead, you could include your styled HTML content, and simply drop in the CleanSlate stylesheet to bring a baseline to the styles for your content.
 * Any other good examples? Share them with "@premasagar":http://twitter.com/premasagar, or add it to "the wiki":http://github.com/premasagar/cleanslate/wiki.


h2. How does it do it?

The stylesheet lists all possible HTML elements, and assigns to them the default (or otherwise appropriate) values for every CSS property. It only looks within elements that have a class attribute of @cleanslate@.


h2. How do I use it?

h3. 1) Link to stylesheet from the @<head>@

Add a @<link>@ to the stylesheet, in the document @<head>@:

bc. <link type="text/css" rel="stylesheet" href="http://example.com/cleanslate.css" />

If you are distributing a Javascript widget, then this can be done programatically. E.g. with jQuery:

bc. $('head').append('<link type="text/css" rel="stylesheet" href="http://example.com/cleanslate.css" />');

Alternatively, you could use "@import":http://www.w3.org/TR/CSS2/cascade.html#at-import to call it from within another stylesheet or @<style>@ element:

bc. @import http://example.com/cleanslate.css
/* Add the rest of your CSS here */


h3. 2) Add the class attribute @cleanslate@ to your HTML container

The @cleanslate@ element will have its styling be reset:

bc. <body>
    <div class="blah">
        <!-- general content is not affected -->
        <div class="myContainer cleanslate">
            <!-- this content will be reset -->
        </div>
    </div>
</body>

The classes @blah@ and @myContainer@ in this example are not required. The class @cleanslate@ _is_ required.

Or, if using jQuery:

bc. $('.myContainer').addClass('cleanslate');


h3. 3) Use @!important@ in your CSS rules

For all of your CSS rules that relate to a @cleanslate@ element or its children, add the keyword @!important@:

bc. .myContainer a {
    color:orange !important;
}
.myContainer .someOtherThing {
    font-weight:bold !important;
}

h3. 4) Set the default styling

CleanSlate automatically applies the following styles to any @cleanslate@ element and its children:

bc. .cleanslate {
    font-family: "Times New Roman", Times, serif !important;
    font-size: medium !important;
    color: black !important;
    line-height: 1 !important;
    direction:ltr !important;
    text-align:left !important;
    font-style:normal !important;
    font-weight:normal !important;
    text-decoration:none !important;
}

If you want to override these default styles, then simply add the new values to your own stylesheet. It's best to use a CSS selector that is specific to your content, instead of using @.cleanslate@, because there may be other @.cleanslate@ elements on the page, now or in future. For example:

bc. .myContainer {
    font-family: Verdana, Arial, sans-serif !important;
    color: #003 !important;
}


h2. History

This approach, of aggressively reset styling on a host page with the use of @!important@ rules, came about while developing the "BBC World Service widget":http://www.bbc.co.uk/worldservice/programmes/000000_widget_terms.shtml (see "this blog post":http://dharmafly.com/bbc-world-service-widget). The widget is injected into a page, not with an @iframe@, but a simple @<div>@ element (the widget's "lightbox" overlay is similarly just a simple @<div>@). The @!important@ styles helped us to prevent any unpredictable CSS styles "bleeding" into the widget.

Since then, the various rules have been consolidated, cleaned up and extended, to form the CleanSlate stylesheet.


h2. Manipulating @!important@ styles with JavaScript

You don't need to use JavaScript to take advantage of the CleanSlate stylesheet. However, if you do want to manipulate CleanSlated elements with JavaScript, then you will find that you cannot change its styles by simply manipulating its @elem.style@ object, as you might do normally. Instead, you will need to edit its @elem.style.cssText@ property, or change its @style@ attribute.

E.g.

bc. elem.style.border = "red";                            // won't work
elem.style.border = "red !important";                 // won't work
elem.style.cssText = "border: red !important";        // WILL work
elem.setAttribute("style", "border: red !important"); // WILL work
//
jQuery(elem).css("border", "red");                    // won't work
jQuery(elem).css("border", "red !important");         // won't work
jQuery(elem).attr("style", "border: red !important"); // WILL work

If you are using jQuery, you can use my "'Important' plugin":http://github.com/premasagar/important to make this process much more easy. With this, you can add @true@ as a third argument to the @css()@ method:

bc. jQuery(elem).css("border", "red", true);

or turn on @!important@ handling by default:

bc. jQuery.important();
jQuery(elem).css("border", "red");

or make an element's styles use @!important@:

bc. jQuery(elem).important();

or not:

bc. jQuery(elem).important(false);

...amongst other useful features.

h2. References

The following documents were invaluable as building blocks for CleanSlate:
 * Eric Meyer's Reset CSS - "http://meyerweb.com/eric/tools/css/reset/":http://meyerweb.com/eric/tools/css/reset/
 * HTML5 Reset Stylesheet by Richard Clark - "http://html5doctor.com/html-5-reset-stylesheet":http://html5doctor.com/html-5-reset-stylesheet
 * Default stylesheet for HTML 4 - "http://www.w3.org/TR/CSS2/sample.html":http://www.w3.org/TR/CSS2/sample.html
 * Default stylesheet for Mozilla Firefox - "http://mxr.mozilla.org/mozilla-central/source/layout/style/html.css?raw=1":http://mxr.mozilla.org/mozilla-central/source/layout/style/html.css?raw=1
 * W3C CSS2 Cascade & Inheritance - "http://www.w3.org/TR/CSS2/cascade.html":http://www.w3.org/TR/CSS2/cascade.html
 * W3C CSS3 Selectors - "http://www.w3.org/TR/css3-selectors":http://www.w3.org/TR/css3-selectors
 * List of CSS Properties - "http://meiert.com/en/indices/css-properties/":http://meiert.com/en/indices/css-properties/

Please get in touch if you have any thoughts, would like to contribute, or if you use CleanSlate within a project.
